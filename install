#!/bin/sh

# File:         install
# Created:      12.09.2020
# Author:       Artyom Danilov (@defytheflow)

. "$(dirname "${0}")/.profile"
. "$(dirname "${0}")/init/utils.sh"

main() {
  check_distro
  check_environ
  check_internet

  printf 'install: Update system? [y/n] ' && read -r ans
  [ "${ans}" = 'y' ] && update_system

  install_packages
  install_pip_packages
  install_npm_packages
  [ -z "${WSL_DISTRO_NAME}" ] && install_cargo_packages

  create_dirs
  create_symlinks
}

check_distro() {
  log 'Checking distribution.'

  distro=$(lsb_release -d)

  case "${distro}" in
    *Manjaro*)
      . "$(dirname "${0}")/init/arch.sh"
      ;;
    *Ubuntu*)
      . "$(dirname "${0}")/init/debian.sh"
      ;;
    *)
      log "Distribution '${distro}' is not supported."
      return 1
      ;;
  esac
}

check_environ() {
  log 'Checking evironment variables.'

  if [ -z "${DOTFILES_HOME}" ]; then
    log 'DOTFILES_HOME environment variable has not been set.'
    return 1
  fi
}

check_internet() {
  log 'Checking internet connection.'

  if ! wget -q --spider https://google.com; then
    log 'no internet connection.'
    return 1
  fi
}

install_pip_packages() {
  log 'Installing pip packages.'

  set -- \
    flake8 flake8-quotes \
    httpie \
    ipdb ipython isort \
    mypy \
    pipenv pynvim python-language-server pytest \
    vim-vint \
    yapf

  for pack; do
    python3 -m pip list | grep "${pack}" || python3 -m pip install "${pack}"
  done
}

install_npm_packages() {
  log 'Installing npm packages.'

  set -- \
    bash-language-server \
    create-react-app \
    prettier neovim \
    typescript \
    vim-language-server

  for pack; do
    npm list -g "${pack}" || sudo npm install -g "${pack}"
  done
}

install_cargo_packages() {
  log 'Installing cargo packages.'

  set -- exa

  for pack; do
    command -v "${pack}" || cargo install "${pack}"
  done
}

create_dirs() {
  log 'Creating directories.'

  makedir "${HOME}/.local/bin"
  makedir "${XDG_CONFIG_HOME}/yapf"

  makedir "${XDG_CACHE_HOME}/bash"
  makedir "${XDG_CACHE_HOME}/less"
  makedir "${XDG_CACHE_HOME}/posgres"
  makedir "${XDG_CACHE_HOME}/python"
  makedir "${XDG_CACHE_HOME}/zsh"
}

create_symlinks() {
  log 'Creating symlinks.'

  if command -v code >/dev/null; then
    command -v code-oss >/dev/null && dest='Code - OSS/User' || dest='Code/User'
    symlink 'vscode' "${XDG_CONFIG_HOME}/${dest}"
  fi

  if [ "${USER}" = 'defytheflow' ]; then
    symlink 'git' "${XDG_CONFIG_HOME}/git"
  fi

  symlink 'i3' "${XDG_CONFIG_HOME}/i3"
  symlink 'nvim' "${XDG_CONFIG_HOME}/nvim"
  symlink 'python' "${XDG_CONFIG_HOME}/python"
  symlink 'tmux' "${XDG_CONFIG_HOME}/tmux"

  symlink 'shell/zsh' "${ZDOTDIR}"
  symlink 'term/alacritty' "${XDG_CONFIG_HOME}/alacritty"

  if command -v ipython >/dev/null; then
    symlink "python/ipython_config.py" "${IPYTHONDIR}/profile_default/ipython_config.py"
  fi

  symlink 'python/flake8' "${XDG_CONFIG_HOME}/flake8"
  symlink 'python/pycodestyle' "${XDG_CONFIG_HOME}/pycodestyle"
  symlink 'python/style.yapf' "${XDG_CONFIG_HOME}/yapf/style"
  symlink 'user-dirs.dirs' "${XDG_CONFIG_HOME}/user-dirs.dirs"

  symlink 'typescript/.prettierrc' "${HOME}/.prettierrc"
  symlink 'shell/bash/.bashrc' "${HOME}/.bashrc"
  symlink 'clang/.clang-format' "${HOME}/.clang-format"

  symlink '.inputrc' "${HOME}/.inputrc"
  symlink '.profile' "${HOME}/.profile"
  symlink '.xprofile' "${HOME}/.xprofile"
  symlink '.zprofile' "${HOME}/.zprofile"
}

main
